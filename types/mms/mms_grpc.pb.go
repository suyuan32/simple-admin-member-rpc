// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: mms.proto

package mms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mms_InitDatabase_FullMethodName           = "/mms.Mms/initDatabase"
	Mms_CreateMember_FullMethodName           = "/mms.Mms/createMember"
	Mms_UpdateMember_FullMethodName           = "/mms.Mms/updateMember"
	Mms_GetMemberList_FullMethodName          = "/mms.Mms/getMemberList"
	Mms_DeleteMember_FullMethodName           = "/mms.Mms/deleteMember"
	Mms_GetMemberById_FullMethodName          = "/mms.Mms/getMemberById"
	Mms_GetMemberByUsername_FullMethodName    = "/mms.Mms/getMemberByUsername"
	Mms_CreateMemberRank_FullMethodName       = "/mms.Mms/createMemberRank"
	Mms_UpdateMemberRank_FullMethodName       = "/mms.Mms/updateMemberRank"
	Mms_GetMemberRankList_FullMethodName      = "/mms.Mms/getMemberRankList"
	Mms_GetMemberRankById_FullMethodName      = "/mms.Mms/getMemberRankById"
	Mms_DeleteMemberRank_FullMethodName       = "/mms.Mms/deleteMemberRank"
	Mms_CreateOauthProvider_FullMethodName    = "/mms.Mms/createOauthProvider"
	Mms_UpdateOauthProvider_FullMethodName    = "/mms.Mms/updateOauthProvider"
	Mms_GetOauthProviderList_FullMethodName   = "/mms.Mms/getOauthProviderList"
	Mms_GetOauthProviderById_FullMethodName   = "/mms.Mms/getOauthProviderById"
	Mms_DeleteOauthProvider_FullMethodName    = "/mms.Mms/deleteOauthProvider"
	Mms_OauthLogin_FullMethodName             = "/mms.Mms/oauthLogin"
	Mms_OauthCallback_FullMethodName          = "/mms.Mms/oauthCallback"
	Mms_WechatMiniProgramLogin_FullMethodName = "/mms.Mms/wechatMiniProgramLogin"
	Mms_CreateToken_FullMethodName            = "/mms.Mms/createToken"
	Mms_DeleteToken_FullMethodName            = "/mms.Mms/deleteToken"
	Mms_GetTokenList_FullMethodName           = "/mms.Mms/getTokenList"
	Mms_GetTokenById_FullMethodName           = "/mms.Mms/getTokenById"
	Mms_BlockUserAllToken_FullMethodName      = "/mms.Mms/blockUserAllToken"
	Mms_UpdateToken_FullMethodName            = "/mms.Mms/updateToken"
)

// MmsClient is the client API for Mms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MmsClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// Member management
	// group: member
	CreateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// group: member
	UpdateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: member
	GetMemberList(ctx context.Context, in *MemberListReq, opts ...grpc.CallOption) (*MemberListResp, error)
	// group: member
	DeleteMember(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: member
	GetMemberById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*MemberInfo, error)
	// group: member
	GetMemberByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*MemberInfo, error)
	// MemberRank management
	// group: memberrank
	CreateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: memberrank
	UpdateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: memberrank
	GetMemberRankList(ctx context.Context, in *MemberRankListReq, opts ...grpc.CallOption) (*MemberRankListResp, error)
	// group: memberrank
	GetMemberRankById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MemberRankInfo, error)
	// group: memberrank
	DeleteMemberRank(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// OauthProvider management
	// group: oauthprovider
	CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: oauthprovider
	UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: oauthprovider
	GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error)
	// group: oauthprovider
	GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error)
	// group: oauthprovider
	DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: oauthprovider
	OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error)
	// group: oauthprovider
	OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*MemberInfo, error)
	// group: oauthprovider
	WechatMiniProgramLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Token management
	// group: token
	CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// group: token
	DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: token
	GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error)
	// group: token
	GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error)
	// group: token
	BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: token
	UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error)
}

type mmsClient struct {
	cc grpc.ClientConnInterface
}

func NewMmsClient(cc grpc.ClientConnInterface) MmsClient {
	return &mmsClient{cc}
}

func (c *mmsClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mms_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) CreateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, Mms_CreateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) UpdateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mms_UpdateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) GetMemberList(ctx context.Context, in *MemberListReq, opts ...grpc.CallOption) (*MemberListResp, error) {
	out := new(MemberListResp)
	err := c.cc.Invoke(ctx, Mms_GetMemberList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) DeleteMember(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mms_DeleteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) GetMemberById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	out := new(MemberInfo)
	err := c.cc.Invoke(ctx, Mms_GetMemberById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) GetMemberByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	out := new(MemberInfo)
	err := c.cc.Invoke(ctx, Mms_GetMemberByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) CreateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Mms_CreateMemberRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) UpdateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mms_UpdateMemberRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) GetMemberRankList(ctx context.Context, in *MemberRankListReq, opts ...grpc.CallOption) (*MemberRankListResp, error) {
	out := new(MemberRankListResp)
	err := c.cc.Invoke(ctx, Mms_GetMemberRankList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) GetMemberRankById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MemberRankInfo, error) {
	out := new(MemberRankInfo)
	err := c.cc.Invoke(ctx, Mms_GetMemberRankById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) DeleteMemberRank(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mms_DeleteMemberRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Mms_CreateOauthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mms_UpdateOauthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error) {
	out := new(OauthProviderListResp)
	err := c.cc.Invoke(ctx, Mms_GetOauthProviderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error) {
	out := new(OauthProviderInfo)
	err := c.cc.Invoke(ctx, Mms_GetOauthProviderById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mms_DeleteOauthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error) {
	out := new(OauthRedirectResp)
	err := c.cc.Invoke(ctx, Mms_OauthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	out := new(MemberInfo)
	err := c.cc.Invoke(ctx, Mms_OauthCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) WechatMiniProgramLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mms_WechatMiniProgramLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, Mms_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mms_DeleteToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error) {
	out := new(TokenListResp)
	err := c.cc.Invoke(ctx, Mms_GetTokenList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, Mms_GetTokenById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mms_BlockUserAllToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsClient) UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mms_UpdateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MmsServer is the server API for Mms service.
// All implementations must embed UnimplementedMmsServer
// for forward compatibility
type MmsServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// Member management
	// group: member
	CreateMember(context.Context, *MemberInfo) (*BaseUUIDResp, error)
	// group: member
	UpdateMember(context.Context, *MemberInfo) (*BaseResp, error)
	// group: member
	GetMemberList(context.Context, *MemberListReq) (*MemberListResp, error)
	// group: member
	DeleteMember(context.Context, *UUIDsReq) (*BaseResp, error)
	// group: member
	GetMemberById(context.Context, *UUIDReq) (*MemberInfo, error)
	// group: member
	GetMemberByUsername(context.Context, *UsernameReq) (*MemberInfo, error)
	// MemberRank management
	// group: memberrank
	CreateMemberRank(context.Context, *MemberRankInfo) (*BaseIDResp, error)
	// group: memberrank
	UpdateMemberRank(context.Context, *MemberRankInfo) (*BaseResp, error)
	// group: memberrank
	GetMemberRankList(context.Context, *MemberRankListReq) (*MemberRankListResp, error)
	// group: memberrank
	GetMemberRankById(context.Context, *IDReq) (*MemberRankInfo, error)
	// group: memberrank
	DeleteMemberRank(context.Context, *IDsReq) (*BaseResp, error)
	// OauthProvider management
	// group: oauthprovider
	CreateOauthProvider(context.Context, *OauthProviderInfo) (*BaseIDResp, error)
	// group: oauthprovider
	UpdateOauthProvider(context.Context, *OauthProviderInfo) (*BaseResp, error)
	// group: oauthprovider
	GetOauthProviderList(context.Context, *OauthProviderListReq) (*OauthProviderListResp, error)
	// group: oauthprovider
	GetOauthProviderById(context.Context, *IDReq) (*OauthProviderInfo, error)
	// group: oauthprovider
	DeleteOauthProvider(context.Context, *IDsReq) (*BaseResp, error)
	// group: oauthprovider
	OauthLogin(context.Context, *OauthLoginReq) (*OauthRedirectResp, error)
	// group: oauthprovider
	OauthCallback(context.Context, *CallbackReq) (*MemberInfo, error)
	// group: oauthprovider
	WechatMiniProgramLogin(context.Context, *OauthLoginReq) (*BaseResp, error)
	// Token management
	// group: token
	CreateToken(context.Context, *TokenInfo) (*BaseUUIDResp, error)
	// group: token
	DeleteToken(context.Context, *UUIDsReq) (*BaseResp, error)
	// group: token
	GetTokenList(context.Context, *TokenListReq) (*TokenListResp, error)
	// group: token
	GetTokenById(context.Context, *UUIDReq) (*TokenInfo, error)
	// group: token
	BlockUserAllToken(context.Context, *UUIDReq) (*BaseResp, error)
	// group: token
	UpdateToken(context.Context, *TokenInfo) (*BaseResp, error)
	mustEmbedUnimplementedMmsServer()
}

// UnimplementedMmsServer must be embedded to have forward compatible implementations.
type UnimplementedMmsServer struct {
}

func (UnimplementedMmsServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedMmsServer) CreateMember(context.Context, *MemberInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedMmsServer) UpdateMember(context.Context, *MemberInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedMmsServer) GetMemberList(context.Context, *MemberListReq) (*MemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberList not implemented")
}
func (UnimplementedMmsServer) DeleteMember(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedMmsServer) GetMemberById(context.Context, *UUIDReq) (*MemberInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberById not implemented")
}
func (UnimplementedMmsServer) GetMemberByUsername(context.Context, *UsernameReq) (*MemberInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberByUsername not implemented")
}
func (UnimplementedMmsServer) CreateMemberRank(context.Context, *MemberRankInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberRank not implemented")
}
func (UnimplementedMmsServer) UpdateMemberRank(context.Context, *MemberRankInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberRank not implemented")
}
func (UnimplementedMmsServer) GetMemberRankList(context.Context, *MemberRankListReq) (*MemberRankListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberRankList not implemented")
}
func (UnimplementedMmsServer) GetMemberRankById(context.Context, *IDReq) (*MemberRankInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberRankById not implemented")
}
func (UnimplementedMmsServer) DeleteMemberRank(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberRank not implemented")
}
func (UnimplementedMmsServer) CreateOauthProvider(context.Context, *OauthProviderInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOauthProvider not implemented")
}
func (UnimplementedMmsServer) UpdateOauthProvider(context.Context, *OauthProviderInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOauthProvider not implemented")
}
func (UnimplementedMmsServer) GetOauthProviderList(context.Context, *OauthProviderListReq) (*OauthProviderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthProviderList not implemented")
}
func (UnimplementedMmsServer) GetOauthProviderById(context.Context, *IDReq) (*OauthProviderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthProviderById not implemented")
}
func (UnimplementedMmsServer) DeleteOauthProvider(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOauthProvider not implemented")
}
func (UnimplementedMmsServer) OauthLogin(context.Context, *OauthLoginReq) (*OauthRedirectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLogin not implemented")
}
func (UnimplementedMmsServer) OauthCallback(context.Context, *CallbackReq) (*MemberInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthCallback not implemented")
}
func (UnimplementedMmsServer) WechatMiniProgramLogin(context.Context, *OauthLoginReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatMiniProgramLogin not implemented")
}
func (UnimplementedMmsServer) CreateToken(context.Context, *TokenInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedMmsServer) DeleteToken(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedMmsServer) GetTokenList(context.Context, *TokenListReq) (*TokenListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenList not implemented")
}
func (UnimplementedMmsServer) GetTokenById(context.Context, *UUIDReq) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenById not implemented")
}
func (UnimplementedMmsServer) BlockUserAllToken(context.Context, *UUIDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUserAllToken not implemented")
}
func (UnimplementedMmsServer) UpdateToken(context.Context, *TokenInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedMmsServer) mustEmbedUnimplementedMmsServer() {}

// UnsafeMmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MmsServer will
// result in compilation errors.
type UnsafeMmsServer interface {
	mustEmbedUnimplementedMmsServer()
}

func RegisterMmsServer(s grpc.ServiceRegistrar, srv MmsServer) {
	s.RegisterService(&Mms_ServiceDesc, srv)
}

func _Mms_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_CreateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).CreateMember(ctx, req.(*MemberInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).UpdateMember(ctx, req.(*MemberInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_GetMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).GetMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_GetMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).GetMemberList(ctx, req.(*MemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).DeleteMember(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_GetMemberById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).GetMemberById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_GetMemberById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).GetMemberById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_GetMemberByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).GetMemberByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_GetMemberByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).GetMemberByUsername(ctx, req.(*UsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_CreateMemberRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRankInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).CreateMemberRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_CreateMemberRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).CreateMemberRank(ctx, req.(*MemberRankInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_UpdateMemberRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRankInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).UpdateMemberRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_UpdateMemberRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).UpdateMemberRank(ctx, req.(*MemberRankInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_GetMemberRankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRankListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).GetMemberRankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_GetMemberRankList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).GetMemberRankList(ctx, req.(*MemberRankListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_GetMemberRankById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).GetMemberRankById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_GetMemberRankById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).GetMemberRankById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_DeleteMemberRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).DeleteMemberRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_DeleteMemberRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).DeleteMemberRank(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_CreateOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).CreateOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_CreateOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).CreateOauthProvider(ctx, req.(*OauthProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_UpdateOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).UpdateOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_UpdateOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).UpdateOauthProvider(ctx, req.(*OauthProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_GetOauthProviderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).GetOauthProviderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_GetOauthProviderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).GetOauthProviderList(ctx, req.(*OauthProviderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_GetOauthProviderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).GetOauthProviderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_GetOauthProviderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).GetOauthProviderById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_DeleteOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).DeleteOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_DeleteOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).DeleteOauthProvider(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_OauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).OauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_OauthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).OauthLogin(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_OauthCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).OauthCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_OauthCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).OauthCallback(ctx, req.(*CallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_WechatMiniProgramLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).WechatMiniProgramLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_WechatMiniProgramLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).WechatMiniProgramLogin(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).CreateToken(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_DeleteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).DeleteToken(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_GetTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).GetTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_GetTokenList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).GetTokenList(ctx, req.(*TokenListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_GetTokenById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).GetTokenById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_GetTokenById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).GetTokenById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_BlockUserAllToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).BlockUserAllToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_BlockUserAllToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).BlockUserAllToken(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mms_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mms_UpdateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServer).UpdateToken(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Mms_ServiceDesc is the grpc.ServiceDesc for Mms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mms.Mms",
	HandlerType: (*MmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Mms_InitDatabase_Handler,
		},
		{
			MethodName: "createMember",
			Handler:    _Mms_CreateMember_Handler,
		},
		{
			MethodName: "updateMember",
			Handler:    _Mms_UpdateMember_Handler,
		},
		{
			MethodName: "getMemberList",
			Handler:    _Mms_GetMemberList_Handler,
		},
		{
			MethodName: "deleteMember",
			Handler:    _Mms_DeleteMember_Handler,
		},
		{
			MethodName: "getMemberById",
			Handler:    _Mms_GetMemberById_Handler,
		},
		{
			MethodName: "getMemberByUsername",
			Handler:    _Mms_GetMemberByUsername_Handler,
		},
		{
			MethodName: "createMemberRank",
			Handler:    _Mms_CreateMemberRank_Handler,
		},
		{
			MethodName: "updateMemberRank",
			Handler:    _Mms_UpdateMemberRank_Handler,
		},
		{
			MethodName: "getMemberRankList",
			Handler:    _Mms_GetMemberRankList_Handler,
		},
		{
			MethodName: "getMemberRankById",
			Handler:    _Mms_GetMemberRankById_Handler,
		},
		{
			MethodName: "deleteMemberRank",
			Handler:    _Mms_DeleteMemberRank_Handler,
		},
		{
			MethodName: "createOauthProvider",
			Handler:    _Mms_CreateOauthProvider_Handler,
		},
		{
			MethodName: "updateOauthProvider",
			Handler:    _Mms_UpdateOauthProvider_Handler,
		},
		{
			MethodName: "getOauthProviderList",
			Handler:    _Mms_GetOauthProviderList_Handler,
		},
		{
			MethodName: "getOauthProviderById",
			Handler:    _Mms_GetOauthProviderById_Handler,
		},
		{
			MethodName: "deleteOauthProvider",
			Handler:    _Mms_DeleteOauthProvider_Handler,
		},
		{
			MethodName: "oauthLogin",
			Handler:    _Mms_OauthLogin_Handler,
		},
		{
			MethodName: "oauthCallback",
			Handler:    _Mms_OauthCallback_Handler,
		},
		{
			MethodName: "wechatMiniProgramLogin",
			Handler:    _Mms_WechatMiniProgramLogin_Handler,
		},
		{
			MethodName: "createToken",
			Handler:    _Mms_CreateToken_Handler,
		},
		{
			MethodName: "deleteToken",
			Handler:    _Mms_DeleteToken_Handler,
		},
		{
			MethodName: "getTokenList",
			Handler:    _Mms_GetTokenList_Handler,
		},
		{
			MethodName: "getTokenById",
			Handler:    _Mms_GetTokenById_Handler,
		},
		{
			MethodName: "blockUserAllToken",
			Handler:    _Mms_BlockUserAllToken_Handler,
		},
		{
			MethodName: "updateToken",
			Handler:    _Mms_UpdateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mms.proto",
}
